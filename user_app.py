# user_app.py
import streamlit as st
import pandas as pd
from datetime import datetime
from auth import get_connection, calc_hours
import re

def _load_visible_projects(supabase, username: str) -> pd.DataFrame:
    """
    L·∫•y danh s√°ch d·ª± √°n user ƒëang c√≥ nhi·ªám v·ª• ho·∫∑c l√† public
    """
    data = supabase.table("projects").select("id, name, deadline, project_type").eq("project_type", "public").execute()
    public_df = pd.DataFrame(data.data)


    data = supabase.table("tasks").select("project").eq("assignee", username).execute()
    assigned_names = list({r["project"] for r in data.data})


    if assigned_names:
        data = supabase.table("projects").select("id, name, deadline, project_type").in_("name", assigned_names).execute()
        assigned_df = pd.DataFrame(data.data)
    else:
        assigned_df = pd.DataFrame(columns=["id", "name", "deadline", "project_type"])


    all_df = (
        pd.concat([public_df, assigned_df], ignore_index=True)
        .drop_duplicates(subset=["name"])
        .sort_values("name")
        .reset_index(drop=True)
    )
    return all_df


def user_app(user):
    """
    Giao di·ªán cho user th∆∞·ªùng:
    - Xem & s·ª≠a c√¥ng vi·ªác c·ªßa m√¨nh (kh·ªëi l∆∞·ª£ng, ti·∫øn ƒë·ªô)
    - C√≥ th·ªÉ t·ª± th√™m c√¥ng vi·ªác trong c√°c d·ª± √°n Public
    """
    # st.set_page_config(layout="wide")  # Ch·ªâ n√™n g·ªçi 1 l·∫ßn trong app.py
    supabase = get_connection()
    try:
        username = user[1]
        supabase.table("users").update({"last_seen": datetime.utcnow().isoformat(timespec="seconds")}).eq("username", username).execute()

        st.subheader("üßë‚Äçüíª C√¥ng vi·ªác c·ªßa t√¥i")

        projects_df = _load_visible_projects(supabase, username)
        if projects_df.empty:
            st.info("‚ö†Ô∏è B·∫°n hi·ªán ch∆∞a c√≥ d·ª± √°n n√†o ho·∫∑c ch∆∞a ƒë∆∞·ª£c giao vi·ªác.")
            return

        # ======= Ch·ªçn d·ª± √°n =======
        project = st.selectbox(
            "Ch·ªçn d·ª± √°n", projects_df["name"].tolist(), key="user_proj_select"
        )
        prow = projects_df.loc[projects_df["name"] == project].iloc[0]
        proj_deadline = prow["deadline"]
        proj_type = (prow["project_type"] or "group").strip().lower()
        is_public = proj_type == "public"

        # ======= Danh s√°ch task c·ªßa user =======
        data = supabase.table("tasks").select("id, task, khoi_luong, progress, deadline, note").eq("project", project).eq("assignee", username).execute()
        df_tasks = pd.DataFrame(data.data)

        # ‚úÖ Fix: N·∫øu user ch∆∞a c√≥ task ‚áí kh√¥ng x·ª≠ l√Ω ti·∫øp ph·∫ßn t√°ch gi·ªù
        if df_tasks.empty:
            st.warning("‚ö†Ô∏è B·∫°n ch∆∞a c√≥ c√¥ng vi·ªác n√†o trong d·ª± √°n n√†y.")        
        else:
            # === T√°ch gi·ªù b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c t·ª´ note n·∫øu c√≥ d·∫°ng "‚è∞ 08:00 - 17:00 (...)" ===
            def extract_times(note):
                match = re.search(r"(\d{2}:\d{2})\s*-\s*(\d{2}:\d{2})", str(note))
                if match:
                    return match.group(1), match.group(2)
                return "", ""

            df_tasks["Gi·ªù b·∫Øt ƒë·∫ßu"], df_tasks["Gi·ªù k·∫øt th√∫c"] = zip(*df_tasks["note"].map(extract_times))
            # Chuy·ªÉn "HH:MM" -> datetime.time ƒë·ªÉ d√πng ƒë∆∞·ª£c v·ªõi TimeColumn
            def _to_time(x):
                if x is None or str(x).strip() == "":
                    return None
                try:
                    # ƒë√∫ng ƒë·ªãnh d·∫°ng HH:MM
                    return pd.to_datetime(str(x), format="%H:%M").time()
                except Exception:
                    try:
                        # fallback n·∫øu v·ªÅ sau d·ªØ li·ªáu c√≥ gi√¢y HH:MM:SS
                        return pd.to_datetime(str(x)).time()
                    except Exception:
                        return None

            df_tasks["Gi·ªù b·∫Øt ƒë·∫ßu"] = df_tasks["Gi·ªù b·∫Øt ƒë·∫ßu"].map(_to_time)
            df_tasks["Gi·ªù k·∫øt th√∫c"] = df_tasks["Gi·ªù k·∫øt th√∫c"].map(_to_time)

            if df_tasks.empty:
                st.warning("‚ö†Ô∏è B·∫°n ch∆∞a c√≥ c√¥ng vi·ªác n√†o trong d·ª± √°n n√†y.")
            else:
                rename_map = {
                    "task": "C√¥ng vi·ªác",
                    "khoi_luong": "Kh·ªëi l∆∞·ª£ng (gi·ªù)" if is_public else "Kh·ªëi l∆∞·ª£ng",
                    "progress": "Ti·∫øn ƒë·ªô (%)",
                    "deadline": "Deadline",
                    "note": "Ghi ch√∫",
                }
                df_show = df_tasks.rename(columns=rename_map).drop(columns=["id"])
                df_show["Ch·ªçn"] = False
                # Th√™m 2 c·ªôt gi·ªù b·∫Øt ƒë·∫ßu/k·∫øt th√∫c n·∫øu ch∆∞a c√≥
                if "Gi·ªù b·∫Øt ƒë·∫ßu" in df_tasks.columns and "Gi·ªù b·∫Øt ƒë·∫ßu" not in df_show.columns:
                    df_show.insert(1, "Gi·ªù b·∫Øt ƒë·∫ßu", df_tasks["Gi·ªù b·∫Øt ƒë·∫ßu"])

                if "Gi·ªù k·∫øt th√∫c" in df_tasks.columns and "Gi·ªù k·∫øt th√∫c" not in df_show.columns:
                    df_show.insert(2, "Gi·ªù k·∫øt th√∫c", df_tasks["Gi·ªù k·∫øt th√∫c"])


                # N·∫øu public -> b·ªè Ti·∫øn ƒë·ªô, Deadline
                if is_public:
                    drop_cols = [
                        c for c in ["Deadline", "Ti·∫øn ƒë·ªô (%)"] if c in df_show.columns
                    ]
                    df_show = df_show.drop(columns=drop_cols, errors="ignore")

                edited = st.data_editor(
                    df_show,
                    key="user_tasks_editor",
                    width="stretch",
                    hide_index=True,
                    column_config={
                        "C√¥ng vi·ªác": st.column_config.TextColumn(disabled=True),
                        "Gi·ªù b·∫Øt ƒë·∫ßu": st.column_config.TimeColumn("Gi·ªù b·∫Øt ƒë·∫ßu", format="HH:mm"),
                        "Gi·ªù k·∫øt th√∫c": st.column_config.TimeColumn("Gi·ªù k·∫øt th√∫c", format="HH:mm"),
                        "Ghi ch√∫": st.column_config.TextColumn(),
                        "Ch·ªçn": st.column_config.CheckboxColumn("X√≥a?", help="Tick ƒë·ªÉ x√≥a d√≤ng n√†y"),
                    },
                )


                col1, col2 = st.columns([2, 1])
                with col1:
                    if st.button("üíæ L∆∞u thay ƒë·ªïi"):
                        from datetime import time, date

                        def _fmt_time(t):  # -> "HH:MM"
                            if isinstance(t, time):
                                return t.strftime("%H:%M")
                            s = str(t).strip()
                            for fmt in ("%H:%M", "%H:%M:%S"):
                                try:
                                    return datetime.strptime(s, fmt).strftime("%H:%M")
                                except Exception:
                                    pass
                            return ""

                        def _parse_time(t):  # -> datetime (today + time) ho·∫∑c None
                            if isinstance(t, time):
                                return datetime.combine(date.today(), t)
                            s = str(t).strip()
                            for fmt in ("%H:%M", "%H:%M:%S"):
                                try:
                                    return datetime.strptime(s, fmt)
                                except Exception:
                                    pass
                            return None

                        for i, row in edited.iterrows():
                            task_id = int(df_tasks.iloc[i]["id"])
                            update_data = {}

                            # üïí L·∫•y gi·ªù v√† ghi ch√∫
                            start_time = row.get("Gi·ªù b·∫Øt ƒë·∫ßu", "")
                            end_time = row.get("Gi·ªù k·∫øt th√∫c", "")
                            note_text = str(row.get("Ghi ch√∫", "")).strip()

                            # üßπ Gi·ªØ l·∫°i ph·∫ßn ng√†y n·∫øu c√≥
                            match_date = re.search(r"\(\d{4}-\d{2}-\d{2}\s*-\s*\d{4}-\d{2}-\d{2}\)", note_text)
                            date_part = match_date.group(0) if match_date else ""

                            # üßπ X√≥a ph·∫ßn gi·ªù c≈© + ng√†y c≈© ƒë·ªÉ tr√°nh l·∫∑p
                            note_text = re.sub(r"^‚è∞\s*\d{2}:\d{2}(?::\d{2})?\s*-\s*\d{2}:\d{2}(?::\d{2})?", "", note_text)
                            note_text = re.sub(r"\(\d{4}-\d{2}-\d{2}\s*-\s*\d{4}-\d{2}-\d{2}\)", "", note_text).strip()

                            # üïí Gh√©p l·∫°i ghi ch√∫ m·ªõi
                            start_str = _fmt_time(start_time)
                            end_str = _fmt_time(end_time)
                            if start_str and end_str:
                                new_note = f"‚è∞ {start_str} - {end_str} {date_part} {note_text}".strip()
                            else:
                                new_note = note_text
                            update_data["note"] = new_note

                            # üßÆ T√≠nh l·∫°i kh·ªëi l∆∞·ª£ng (gi·ªù)
                            st_dt = _parse_time(start_time)
                            en_dt = _parse_time(end_time)
                            if st_dt and en_dt:
                                if en_dt < st_dt:
                                    en_dt = en_dt.replace(day=st_dt.day + 1)
                                hours = (en_dt - st_dt).total_seconds() / 3600
                                if hours > 0:
                                    update_data["khoi_luong"] = round(hours, 2)
                                    df_show.at[i, "Kh·ªëi l∆∞·ª£ng (gi·ªù)"] = round(hours, 2)

                            # üìä Ti·∫øn ƒë·ªô
                            if "Ti·∫øn ƒë·ªô (%)" in row and not pd.isna(row["Ti·∫øn ƒë·ªô (%)"]):
                                update_data["progress"] = float(row["Ti·∫øn ƒë·ªô (%)"])

                            # üíæ Ghi xu·ªëng database
                            if update_data:
                                supabase.table("tasks").update(update_data).eq("id", task_id).execute()

                        st.success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t gi·ªù, ghi ch√∫ v√† kh·ªëi l∆∞·ª£ng!")
                        st.rerun()



                with col2:
                    if st.button("üóëÔ∏è X√≥a c√°c d√≤ng ƒë√£ ch·ªçn", key="delete_my_tasks_btn"):
                        ids_to_delete = [
                            int(df_tasks.iloc[i]["id"])
                            for i, row in edited.iterrows()
                            if row.get("Ch·ªçn")
                        ]
                        if ids_to_delete:
                            for tid in ids_to_delete:
                                supabase.table("tasks").delete().eq("id", tid).execute()
                            
                            st.success(f"‚úÖ ƒê√£ x√≥a {len(ids_to_delete)} d√≤ng")
                            st.rerun()
                        else:
                            st.warning("‚ö†Ô∏è Ch∆∞a ch·ªçn d√≤ng n√†o ƒë·ªÉ x√≥a")

        # ======= T·ª± th√™m c√¥ng vi·ªác (n·∫øu public) =======
        if is_public:
            st.markdown("---")
            st.subheader("‚ûï Th√™m c√¥ng vi·ªác / c√¥ng nh·∫≠t cho b·∫£n th√¢n (Public)")

            # L·∫•y danh m·ª•c c√¥ng vi·ªác
            supabase.table("job_catalog").update({"project_type": "group"}).is_("project_type", None).execute()
            
            
            data = supabase.table("job_catalog").select("id, name, unit, parent_id").eq("project_type", proj_type).execute()
            jobs = pd.DataFrame(data.data)

            parent_jobs = jobs[jobs["parent_id"].isnull()].sort_values("name")
            col_a, col_b = st.columns([3, 3])
            with col_a:
                parent_choice = st.selectbox(
                    "ƒê·∫ßu m·ª•c c√¥ng vi·ªác",
                    parent_jobs["name"].tolist(),
                    key="user_self_parent",
                )
            pid = None
            if not parent_jobs.empty:
                pid = int(
                    parent_jobs.loc[
                        parent_jobs["name"] == parent_choice, "id"
                    ].iloc[0]
                )
            childs = jobs[jobs["parent_id"] == pid].sort_values("name")
            with col_b:
                child_choice = st.selectbox(
                    "C√¥ng vi·ªác chi ti·∫øt", childs["name"].tolist(), key="user_self_child"
                )

            task_name = child_choice or parent_choice
            unit = (
                jobs.loc[jobs["name"] == task_name, "unit"].iloc[0]
                if task_name in jobs["name"].values
                else ""
            ) or ""

            # N·∫øu l√† c√¥ng nh·∫≠t
            if str(unit).strip().lower() == "c√¥ng":
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    start_date = st.date_input(
                        "Ng√†y b·∫Øt ƒë·∫ßu", key="user_self_start_date"
                    )
                with col2:
                    start_time = st.time_input(
                        "Gi·ªù b·∫Øt ƒë·∫ßu", pd.to_datetime("08:00").time(), key="user_self_start_time"
                    )
                with col3:
                    end_date = st.date_input(
                        "Ng√†y k·∫øt th√∫c", key="user_self_end_date", value=start_date
                    )
                with col4:
                    end_time = st.time_input(
                        "Gi·ªù k·∫øt th√∫c", pd.to_datetime("17:00").time(), key="user_self_end_time"
                    )

                note = st.text_area("üìù Ghi ch√∫ (tu·ª≥ ch·ªçn)", key="user_self_note")

                if st.button("‚ûï Th√™m c√¥ng nh·∫≠t cho t√¥i", key="add_self_cong_btn"):
                    hours = calc_hours(start_date, end_date, start_time, end_time)
                    note_txt = f"‚è∞ {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} ({start_date} - {end_date})"
                    if note:
                        note_txt += f" {note}"

                    
                    supabase.table("tasks").insert({
                        "project": project,
                        "task": task_name,
                        "assignee": username,
                        "khoi_luong": hours,
                        "note": note_txt,
                        "progress": 0
                    }).execute()
                    
                    st.success(
                        f"‚úÖ ƒê√£ th√™m {hours} gi·ªù c√¥ng cho c√¥ng vi·ªác '{task_name}'"
                    )
                    st.rerun()
            else:
                qty = st.number_input(
                    "Kh·ªëi l∆∞·ª£ng", min_value=0.0, step=0.1, key="user_self_qty"
                )
                if st.button("‚ûï Th√™m c√¥ng vi·ªác cho t√¥i", key="add_self_qty_btn"):
                    
                    supabase.table("tasks").insert({
                        "project": project,
                        "task": task_name,
                        "assignee": username,
                        "khoi_luong": float(qty or 0),
                        "note": "",
                        "progress": 0
                    }).execute()
                    
                    st.success("‚úÖ ƒê√£ th√™m c√¥ng vi·ªác cho b·∫°n")
                    st.rerun()
    finally:        
        pass