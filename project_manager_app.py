# project_manager_app.py
import streamlit as st
import pandas as pd
import plotly.express as px
from auth import get_connection

import re

from datetime import datetime, date, time, timedelta
from auth import calc_hours



# -----------------------------
# Helpers
# -----------------------------
def _load_managed_projects(supabase, username: str) -> list[str]:
    """T√™n c√°c d·ª± √°n user l√† Ch·ªß nhi·ªám/Ch·ªß tr√¨ (t·ª´ b·∫£ng users)."""
    data = supabase.table("users").select("project_manager_of, project_leader_of").eq("username", username).execute()
    info = pd.DataFrame(data.data)
    managed = []
    if not info.empty:
        for col in ["project_manager_of", "project_leader_of"]:
            val = info.at[0, col]
            if pd.notna(val) and str(val).strip():
                # ‚úÖ ∆Øu ti√™n t√°ch theo d·∫•u |
                parts = [p.strip() for p in str(val).split("|") if p.strip()]
                managed += parts

    return sorted(set(managed))



def _load_visible_projects(supabase, managed: list[str], username: str) -> pd.DataFrame:
    """D·ª± √°n user c√≥ th·ªÉ th·∫•y: managed + public + d·ª± √°n c√≥ task c·ªßa user."""
    try:
        # D·ª± √°n public
        data = supabase.table("projects").select("id, name, deadline, project_type")\
            .eq("project_type", "public").execute()
        public_df = pd.DataFrame(data.data)
    except Exception:
        # üîÅ N·∫øu l·ªói, t·∫°o l·∫°i k·∫øt n·ªëi Supabase
        from auth import get_connection
        supabase = get_connection()
        data = supabase.table("projects").select("id, name, deadline, project_type")\
            .eq("project_type", "public").execute()
        public_df = pd.DataFrame(data.data)

    # D·ª± √°n do user qu·∫£n l√Ω
    managed_df = pd.DataFrame(columns=["id", "name", "deadline", "project_type"])
    if managed and len(managed) > 0:
        try:
            data = supabase.table("projects").select("id, name, deadline, project_type")\
                .in_("name", managed).execute()
            managed_df = pd.DataFrame(data.data)
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch d·ª± √°n do b·∫°n qu·∫£n l√Ω: {e}")


    # D·ª± √°n user ƒë∆∞·ª£c giao task
    data = supabase.table("tasks").select("project").eq("assignee", username).execute()
    assigned_names = list({r["project"] for r in data.data})
    if assigned_names:
        data = supabase.table("projects").select("id, name, deadline, project_type")\
            .in_("name", assigned_names).execute()
        assigned_df = pd.DataFrame(data.data)
    else:
        assigned_df = pd.DataFrame(columns=["id", "name", "deadline", "project_type"])

    # G·ªôp k·∫øt qu·∫£
    all_df = pd.concat([public_df, managed_df, assigned_df], ignore_index=True) \
               .drop_duplicates(subset=["name"]) \
               .sort_values("name") \
               .reset_index(drop=True)
    return all_df



# -----------------------------
# Main app
# -----------------------------
def project_manager_app(user):
    """
    Giao di·ªán cho Ch·ªß nhi·ªám/Ch·ªß tr√¨ v√† ng∆∞·ªùi d√πng c√≥ nhi·ªám v·ª• trong d·ª± √°n:
    - Qu·∫£n l√Ω giao vi·ªác (n·∫øu l√† qu·∫£n l√Ω d·ª± √°n)
    - Xem/s·ª≠a kh·ªëi l∆∞·ª£ng c·ªßa ch√≠nh m√¨nh (ch·ªâ m√¨nh), th√™m vi·ªác ·ªü d·ª± √°n public
    - Th·ªëng k√™ c√¥ng vi·ªác (ch·ªâ c√°c d·ª± √°n m√¨nh qu·∫£n l√Ω)
    """
    # st.set_page_config(layout="wide")
    supabase = get_connection()
    try:
        # üïí C·∫≠p nh·∫≠t th·ªùi ƒëi·ªÉm truy c·∫≠p cu·ªëi c√πng c·ªßa user
        supabase.table("users").update(
            {"last_seen": datetime.utcnow().isoformat()}
        ).eq("username", user[1]).execute()
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th·ªùi gian truy c·∫≠p: {e}")

    # üß≠ T·∫£i danh s√°ch ng∆∞·ªùi d√πng
    try:
        data = supabase.table("users").select("username, display_name").execute()
        df_users = pd.DataFrame(data.data)
    except Exception as e:
        st.error(f"‚ùå L·ªói khi t·∫£i danh s√°ch ng∆∞·ªùi d√πng: {e}")
        df_users = pd.DataFrame(columns=["username", "display_name"])

    # ‚úÖ Ki·ªÉm tra d·ªØ li·ªáu tr√°nh KeyError
    if df_users.empty or "username" not in df_users.columns:
        st.error("‚ö†Ô∏è Kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch ng∆∞·ªùi d√πng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi Supabase ho·∫∑c b·∫£ng 'users'.")
        return

    # üß© T·∫°o map username ‚Üí display_name (n·∫øu thi·∫øu display_name th√¨ fallback b·∫±ng username)
    user_map = dict(zip(df_users["username"], df_users.get("display_name", df_users["username"])))

    username = user[1]

    managed = _load_managed_projects(supabase, username)
    projects_df = _load_visible_projects(supabase, managed, username)

    if projects_df.empty:
        st.warning("‚ö†Ô∏è Ch∆∞a c√≥ d·ª± √°n n√†o b·∫°n c√≥ quy·ªÅn xem ho·∫∑c qu·∫£n l√Ω.")
        return

    choice = st.sidebar.radio("Ch·ª©c nƒÉng", ["Qu·∫£n l√Ω Giao Vi·ªác", "Th·ªëng k√™ C√¥ng Vi·ªác"])

        # ===========================================================
        # 1) QU·∫¢N L√ù GIAO VI·ªÜC / NHI·ªÜM V·ª§ C·ª¶A T√îI
        # ===========================================================
    if choice == "Qu·∫£n l√Ω Giao Vi·ªác":
        st.subheader("üìù Qu·∫£n l√Ω & Nhi·ªám v·ª•")

        # Ch·ªçn d·ª± √°n
        project = st.selectbox("Ch·ªçn d·ª± √°n", projects_df["name"].tolist(), key="pm_proj_select")
        prow = projects_df.loc[projects_df["name"] == project].iloc[0]
        proj_deadline = prow["deadline"]
        proj_type = (prow["project_type"] or "group").strip().lower()
        is_public = (proj_type == "public")
        is_manager = project in managed

        # Chu·∫©n ho√° job_catalog: NULL -> 'group'
        # ‚úÖ An to√†n h∆°n: Chu·∫©n ho√° job_catalog ƒë·ªÉ tr√°nh l·ªói NULL / m·∫•t k·∫øt n·ªëi
        try:
            supabase.table("job_catalog").update({"project_type": "group"}).is_("project_type", None).execute()
        except Exception:
            st.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ chu·∫©n ho√° d·ªØ li·ªáu job_catalog, th·ª≠ l·∫°i sau.")

        # ‚úÖ L·∫•y danh m·ª•c c√¥ng vi·ªác an to√†n
        try:
            data = supabase.table("job_catalog").select("id, name, unit, parent_id") \
                .eq("project_type", proj_type).execute()
            jobs = pd.DataFrame(data.data)
        except Exception as e:
            st.error(f"‚ùå L·ªói khi t·∫£i danh m·ª•c c√¥ng vi·ªác: {e}")
            st.stop()

        parent_jobs = jobs[jobs["parent_id"].isnull()].sort_values("name")

        # =======================================================
        # A. QU·∫¢N L√ù D·ª∞ √ÅN: giao vi·ªác + xem/s·ª≠a to√†n b·ªô c√¥ng vi·ªác
        # =======================================================
        if is_manager:
            st.info("üîê B·∫°n l√† **Qu·∫£n l√Ω d·ª± √°n** n√†y ‚Äî c√≥ quy·ªÅn giao vi·ªác cho m·ªçi ng∆∞·ªùi.")

            # ---- Giao nhi·ªÅu vi·ªác c√πng l√∫c ----
            all_users_display = df_users["display_name"].tolist()
            assignee_display = st.selectbox("Giao vi·ªác cho", all_users_display, key="pm_assignee")
            assignee = df_users.loc[df_users["display_name"] == assignee_display, "username"].iloc[0]


            if "pm_rows" not in st.session_state:
                st.session_state.pm_rows = [0]

            st.markdown("**Nh·∫≠p c√°c d√≤ng giao vi·ªác**")
            h1, h2, h3, h4, h5 = st.columns([2, 2, 2, 2, 2])
            h1.markdown("**ƒê·∫ßu m·ª•c**")
            h2.markdown("**C√¥ng vi·ªác**")

            if is_public:
                h3.markdown("**Gi·ªù b·∫Øt ƒë·∫ßu**")
                h4.markdown("**Gi·ªù k·∫øt th√∫c**")
            else:
                h3.markdown("**Kh·ªëi l∆∞·ª£ng**")
                h4.markdown("**ƒê∆°n v·ªã**")

            h5.markdown("**Deadline**")


            for i, _ in enumerate(st.session_state.pm_rows):
                c1, c2, c3, c4, c5 = st.columns([2, 2, 2, 2, 2])
                with c1:
                    p_choice = st.selectbox(
                        "", parent_jobs["name"].tolist(),
                        key=f"pm_parent_{i}", label_visibility="collapsed"
                    )
                pid = int(parent_jobs.loc[parent_jobs["name"] == p_choice, "id"].iloc[0])
                childs = jobs[jobs["parent_id"] == pid].sort_values("name")
                with c2:
                    child_choice = st.selectbox(
                        "", childs["name"].tolist(),
                        key=f"pm_child_{i}", label_visibility="collapsed"
                    )

                task_name = child_choice or p_choice
                unit = jobs.loc[jobs["name"] == task_name, "unit"].iloc[0] if task_name in jobs["name"].values else ""

                if str(unit).strip().lower() == "c√¥ng":
                    with c3:
                        st.time_input("", pd.to_datetime("08:00").time(), key=f"pm_start_{i}", label_visibility="collapsed")
                    with c4:
                        st.time_input("", pd.to_datetime("17:00").time(), key=f"pm_end_{i}", label_visibility="collapsed")
                    with c5:
                        st.empty()  # kh√¥ng d√πng deadline cho c√¥ng nh·∫≠t
                else:
                    with c3:
                        st.number_input("", min_value=0.0, step=0.1, key=f"pm_qty_{i}", label_visibility="collapsed")
                    with c4:
                        st.text_input("", value=unit, key=f"pm_unit_{i}", disabled=True, label_visibility="collapsed")
                    with c5:
                        default_dl = pd.to_datetime(proj_deadline) if proj_deadline else None
                        st.date_input("", value=default_dl, key=f"pm_deadline_{i}", label_visibility="collapsed")

            st.button("‚ûï Th√™m d√≤ng", key="pm_add_row", on_click=lambda: st.session_state.pm_rows.append(len(st.session_state.pm_rows)))

            note_common = st.text_area("üìù Ghi ch√∫ chung", key="pm_note_common")

            if st.button("‚úÖ Giao vi·ªác", key="pm_assign_btn"):
                for i in range(len(st.session_state.pm_rows)):
                    p_choice = st.session_state.get(f"pm_parent_{i}")
                    child_choice = st.session_state.get(f"pm_child_{i}")
                    task_name = child_choice or p_choice
                    if not task_name:
                        continue
                    unit = jobs.loc[jobs["name"] == task_name, "unit"].iloc[0] if task_name in jobs["name"].values else ""

                    if str(unit).strip().lower() == "c√¥ng":
                        stime = st.session_state.get(f"pm_start_{i}")
                        etime = st.session_state.get(f"pm_end_{i}")
                        time_txt = f"‚è∞ {stime} - {etime}" if stime and etime else ""
                        note = (note_common + ("\n" if note_common and time_txt else "") + time_txt).strip()
                        supabase.table("tasks").insert({
                            "project": project,
                            "task": task_name,
                            "assignee": assignee,
                            "note": note,
                            "progress": 0
                        }).execute()
                    else:
                        qty = float(st.session_state.get(f"pm_qty_{i}", 0) or 0)
                        dl_val = st.session_state.get(f"pm_deadline_{i}")
                        dl = pd.to_datetime(dl_val, errors="coerce")
                        dl_str = dl.strftime("%Y-%m-%d") if pd.notna(dl) else None
                        supabase.table("tasks").insert({
                            "project": project,
                            "task": task_name,
                            "assignee": assignee,
                            "deadline": dl_str,
                            "khoi_luong": qty,
                            "note": note_common,
                            "progress": 0
                        }).execute()
                
                st.success("‚úÖ ƒê√£ giao vi·ªác")
                st.rerun()

            # ---- B·∫£ng t·∫•t c·∫£ c√¥ng vi·ªác: s·ª≠a & l∆∞u ti·∫øn ƒë·ªô ----
            # ---- B·∫£ng t·∫•t c·∫£ c√¥ng vi·ªác: s·ª≠a & l∆∞u ti·∫øn ƒë·ªô ----
            st.subheader("üìã T·∫•t c·∫£ c√¥ng vi·ªác trong d·ª± √°n")

            
            data = supabase.table("tasks").select("id, assignee, task, khoi_luong, deadline, note, progress").eq("project", project).execute()
            df_all = pd.DataFrame(data.data)
            df_all["assignee"] = df_all["assignee"].map(user_map).fillna(df_all["assignee"])

            if df_all.empty:
                st.info("‚ö†Ô∏è Ch∆∞a c√≥ c√¥ng vi·ªác n√†o trong d·ª± √°n n√†y.")
            else:
                # ƒê·ªïi t√™n c·ªôt sang ti·∫øng Vi·ªát
                df_all = df_all.rename(columns={
                    "id": "ID",
                    "assignee": "Ng∆∞·ªùi th·ª±c hi·ªán",
                    "task": "C√¥ng vi·ªác",
                    "khoi_luong": "Kh·ªëi l∆∞·ª£ng",
                    "deadline": "Deadline",
                    "note": "Ghi ch√∫",
                    "progress": "Ti·∫øn ƒë·ªô (%)",
                })

                # √âp ki·ªÉu Deadline v·ªÅ datetime n·∫øu c√≥ gi√° tr·ªã
                if "Deadline" in df_all.columns:
                    df_all["Deadline"] = pd.to_datetime(df_all["Deadline"], errors="coerce")

                # üëâ T·∫°o b·∫£n hi·ªÉn th·ªã: ·∫©n c·ªôt ID v√† th√™m c·ªôt X√≥a?
                df_display = df_all.drop(columns=["ID"], errors="ignore").copy()
                df_display["X√≥a?"] = False

                edited_df = st.data_editor(
                    df_display,
                    width="stretch",
                    key=f"editor_all_{project}",
                    hide_index=True,
                    column_config={
                        "Ng∆∞·ªùi th·ª±c hi·ªán": st.column_config.TextColumn(disabled=True),
                        "C√¥ng vi·ªác": st.column_config.TextColumn(disabled=True),
                        "Kh·ªëi l∆∞·ª£ng": st.column_config.NumberColumn("Kh·ªëi l∆∞·ª£ng", min_value=0, step=0.25),
                        "Deadline": st.column_config.DateColumn("Deadline", format="YYYY-MM-DD"),
                        "Ghi ch√∫": st.column_config.TextColumn(),
                        "Ti·∫øn ƒë·ªô (%)": st.column_config.NumberColumn("Ti·∫øn ƒë·ªô (%)", min_value=0, max_value=100, step=1),
                        "X√≥a?": st.column_config.CheckboxColumn("X√≥a?", help="Tick ƒë·ªÉ x√≥a d√≤ng n√†y")
                    }
                )

                col1, col2 = st.columns([1, 1])

                # N√∫t l∆∞u c·∫≠p nh·∫≠t c√¥ng vi·ªác
                with col1:                        
                    if st.button("üíæ L∆∞u c·∫≠p nh·∫≠t c√¥ng vi·ªác", key=f"save_all_{project}"):
                        supabase = get_connection()  # ‚úÖ T·∫°o l·∫°i k·∫øt n·ªëi Supabase ngay tr∆∞·ªõc khi update
                    
                        for i, row in edited_df.iterrows():
                            task_id = int(df_all.iloc[i]["ID"])
                            update_data = {}

                            # --- Kh·ªëi l∆∞·ª£ng ---
                            if "Kh·ªëi l∆∞·ª£ng" in row and not pd.isna(row["Kh·ªëi l∆∞·ª£ng"]):
                                try:
                                    val = float(row["Kh·ªëi l∆∞·ª£ng"])
                                    update_data["khoi_luong"] = int(val) if val.is_integer() else round(val, 2)
                                except Exception:
                                    update_data["khoi_luong"] = 0

                            # --- Ti·∫øn ƒë·ªô ---
                            if "Ti·∫øn ƒë·ªô (%)" in row and not pd.isna(row["Ti·∫øn ƒë·ªô (%)"]):
                                try:
                                    val = float(row["Ti·∫øn ƒë·ªô (%)"])
                                    update_data["progress"] = int(val) if val.is_integer() else round(val, 2)
                                except Exception:
                                    update_data["progress"] = 0

                            # --- Deadline ---
                            if "Deadline" in row and pd.notna(row["Deadline"]):
                                update_data["deadline"] = pd.to_datetime(row["Deadline"]).strftime("%Y-%m-%d")

                            # --- Ghi ch√∫ ---
                            if "Ghi ch√∫" in row:
                                val = row["Ghi ch√∫"]
                                if val is None or (isinstance(val, float) and pd.isna(val)):
                                    val = ""
                                else:
                                    val = str(val).strip()
                                update_data["note"] = val

                            # --- N·∫øu c√≥ d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t ---
                            if update_data:
                                try:
                                    supabase.table("tasks").update(update_data).eq("id", task_id).execute()
                                except Exception as e:
                                    st.error(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t task {task_id}: {e}")

                    
                        st.success("‚úÖ ƒê√£ l∆∞u c·∫≠p nh·∫≠t c√¥ng vi·ªác v√†o c∆° s·ªü d·ªØ li·ªáu!")
                        st.rerun()





                # N√∫t x√≥a c√°c d√≤ng ƒë√£ ch·ªçn
                with col2:
                    if st.button("üóëÔ∏è X√≥a c√°c d√≤ng ƒë√£ ch·ªçn", key=f"delete_all_{project}"):
                        ids_to_delete = []
                        for i, row in edited_df.iterrows():
                            if row.get("X√≥a?"):
                                ids_to_delete.append(int(df_all.iloc[i]["ID"]))
                        if ids_to_delete:
                            for tid in ids_to_delete:
                                supabase.table("tasks").delete().eq("id", tid).execute()
                            
                            st.success(f"‚úÖ ƒê√£ x√≥a {len(ids_to_delete)} c√¥ng vi·ªác")
                            st.rerun()
                        else:
                            st.warning("‚ö†Ô∏è Ch∆∞a ch·ªçn d√≤ng n√†o ƒë·ªÉ x√≥a")



        # =======================================================
        # B. KH√îNG ph·∫£i qu·∫£n l√Ω: ch·ªâ s·ª≠a vi·ªác c·ªßa m√¨nh + th√™m ·ªü Public
        # =======================================================
        # =======================================================
        # B. KH√îNG ph·∫£i qu·∫£n l√Ω: ch·ªâ s·ª≠a vi·ªác c·ªßa m√¨nh + th√™m ·ªü Public
        # =======================================================
        else:
            st.info(
                "üë§ B·∫°n **kh√¥ng ph·∫£i qu·∫£n l√Ω** d·ª± √°n n√†y. "
                "B·∫°n c√≥ th·ªÉ ch·ªânh **kh·ªëi l∆∞·ª£ng** c√°c vi·ªác c·ªßa m√¨nh."
                + (" B·∫°n c≈©ng c√≥ th·ªÉ **th√™m kh·ªëi l∆∞·ª£ng m·ªõi** v√¨ ƒë√¢y l√† d·ª± √°n **public**." if is_public else "")
            )

            # ====== Danh s√°ch c√¥ng vi·ªác c·ªßa ch√≠nh user ======
            data = supabase.table("tasks").select("id, task, khoi_luong, deadline, note, progress")\
                .eq("project", project).eq("assignee", username).execute()
            my_tasks = pd.DataFrame(data.data)
            # === T√°ch gi·ªù b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c t·ª´ note n·∫øu c√≥ d·∫°ng "‚è∞ 08:00 - 17:00 (...)" ===
            def extract_times(note):
                match = re.search(r"(\d{2}:\d{2})\s*-\s*(\d{2}:\d{2})", str(note))
                if match:
                    return match.group(1), match.group(2)
                return "", ""

            if not my_tasks.empty:
                my_tasks["Gi·ªù b·∫Øt ƒë·∫ßu"], my_tasks["Gi·ªù k·∫øt th√∫c"] = zip(*my_tasks["note"].map(extract_times))

                def _to_time(x):
                    if x is None or str(x).strip() == "":
                        return None
                    try:
                        return pd.to_datetime(str(x), format="%H:%M").time()
                    except Exception:
                        try:
                            return pd.to_datetime(str(x)).time()
                        except Exception:
                            return None

                my_tasks["Gi·ªù b·∫Øt ƒë·∫ßu"] = my_tasks["Gi·ªù b·∫Øt ƒë·∫ßu"].map(_to_time)
                my_tasks["Gi·ªù k·∫øt th√∫c"] = my_tasks["Gi·ªù k·∫øt th√∫c"].map(_to_time)
            
                        
            # üßπ L√†m s·∫°ch ghi ch√∫: lo·∫°i b·ªè tr√πng l·∫∑p gi·ªù/ng√†y n·∫øu c√≥
            if not my_tasks.empty and "note" in my_tasks.columns:
                def clean_note(n: str):
                    if not isinstance(n, str) or not n.strip():
                        return ""
                    # Gi·ªØ l·∫°i duy nh·∫•t ph·∫ßn ƒë·∫ßu ch·ª©a "‚è∞ HH:MM - HH:MM (...)" n·∫øu xu·∫•t hi·ªán nhi·ªÅu
                    matches = re.findall(r"‚è∞\s*\d{2}:\d{2}\s*-\s*\d{2}:\d{2}.*?\)", n)
                    if len(matches) > 1:
                        rest = n.split(matches[-1])[-1].strip()
                        return f"{matches[0]} {rest}".strip()
                    return n.strip()

                my_tasks["note"] = my_tasks["note"].map(clean_note)




            if my_tasks.empty:
                st.warning("‚ö†Ô∏è B·∫°n ch∆∞a c√≥ c√¥ng vi·ªác n√†o trong d·ª± √°n n√†y.")
            else:
                # DataFrame hi·ªÉn th·ªã (·∫©n ID nh∆∞ng v·∫´n gi·ªØ d·ªØ li·ªáu ID trong my_tasks)
                df_show = my_tasks.rename(columns={
                    "task": "C√¥ng vi·ªác",
                    "khoi_luong": "Kh·ªëi l∆∞·ª£ng (gi·ªù)" if is_public else "Kh·ªëi l∆∞·ª£ng",
                    "deadline": "Deadline",
                    "note": "Ghi ch√∫",
                    "progress": "Ti·∫øn ƒë·ªô (%)"
                }).drop(columns=["id"])  # üëà b·ªè ID kh·ªèi hi·ªÉn th·ªã

                # Th√™m c·ªôt ch·ªçn ƒë·ªÉ x√≥a
                df_show["Ch·ªçn"] = False

                # N·∫øu d·ª± √°n Public -> b·ªè Deadline v√† Ti·∫øn ƒë·ªô
                if is_public:
                    drop_cols = [c for c in ["Deadline", "Ti·∫øn ƒë·ªô (%)"] if c in df_show.columns]
                    df_show = df_show.drop(columns=drop_cols, errors="ignore")

                # Hi·ªÉn th·ªã b·∫£ng cho user ch·ªânh s·ª≠a (kh√¥ng c√≥ c·ªôt ID)
                edited = st.data_editor(
                    df_show,
                    key="my_tasks_editor",
                    width="stretch",
                    hide_index=True,
                    column_config={
                        "C√¥ng vi·ªác": st.column_config.TextColumn(disabled=True),
                        "Gi·ªù b·∫Øt ƒë·∫ßu": st.column_config.TimeColumn("Gi·ªù b·∫Øt ƒë·∫ßu", format="HH:mm"),
                        "Gi·ªù k·∫øt th√∫c": st.column_config.TimeColumn("Gi·ªù k·∫øt th√∫c", format="HH:mm"),
                        "Ghi ch√∫": st.column_config.TextColumn(),
                        "Ch·ªçn": st.column_config.CheckboxColumn("X√≥a?", help="Tick ƒë·ªÉ x√≥a d√≤ng n√†y")
                    }
                )


                col1, col2 = st.columns([2, 1])
                with col1:
                    
                    
                    if st.button("üíæ L∆∞u kh·ªëi l∆∞·ª£ng c·ªßa t√¥i", key="save_my_qty_btn"):
                        

                        def _fmt_time(t):
                            if isinstance(t, time):
                                return t.strftime("%H:%M")
                            s = str(t).strip()
                            for fmt in ("%H:%M", "%H:%M:%S"):
                                try:
                                    return datetime.strptime(s, fmt).strftime("%H:%M")
                                except Exception:
                                    pass
                            return ""

                        def _parse_time(t):
                            if isinstance(t, time):
                                return datetime.combine(date.today(), t)
                            s = str(t).strip()
                            for fmt in ("%H:%M", "%H:%M:%S"):
                                try:
                                    return datetime.strptime(s, fmt)
                                except Exception:
                                    pass
                            return None

                        for i, row in edited.iterrows():
                            tid = int(my_tasks.iloc[i]["id"])
                            update_data = {}

                            start_time = row.get("Gi·ªù b·∫Øt ƒë·∫ßu", "")
                            end_time = row.get("Gi·ªù k·∫øt th√∫c", "")
                            note_text = str(row.get("Ghi ch√∫", "")).strip()

                            # üßπ Gi·ªØ l·∫°i ph·∫ßn ng√†y n·∫øu c√≥
                            match_date = re.search(r"\(\d{4}-\d{2}-\d{2}\s*-\s*\d{4}-\d{2}-\d{2}\)", note_text)
                            date_part = match_date.group(0) if match_date else ""

                            # üßπ X√≥a ph·∫ßn gi·ªù c≈© ƒë·ªÉ tr√°nh l·∫∑p
                            note_text = re.sub(r"^‚è∞\s*\d{2}:\d{2}(?::\d{2})?\s*-\s*\d{2}:\d{2}(?::\d{2})?", "", note_text)
                            note_text = re.sub(r"\(\d{4}-\d{2}-\d{2}\s*-\s*\d{4}-\d{2}-\d{2}\)", "", note_text).strip()

                            # üïí Gh√©p l·∫°i ghi ch√∫ m·ªõi
                            start_str = _fmt_time(start_time)
                            end_str = _fmt_time(end_time)
                            if start_str and end_str:
                                new_note = f"‚è∞ {start_str} - {end_str} {date_part} {note_text}".strip()
                            else:
                                new_note = note_text
                            update_data["note"] = new_note

                            # üßÆ T√≠nh l·∫°i kh·ªëi l∆∞·ª£ng (gi·ªù)
                            try:
                                # L·∫•y ng√†y t·ª´ note n·∫øu c√≥ (d·∫°ng "(YYYY-MM-DD - YYYY-MM-DD)")
                                match_date = re.search(r"\((\d{4}-\d{2}-\d{2})\s*-\s*(\d{4}-\d{2}-\d{2})\)", note_text)
                                if match_date:
                                    start_date_str, end_date_str = match_date.groups()
                                    start_date = datetime.strptime(start_date_str, "%Y-%m-%d").date()
                                    end_date = datetime.strptime(end_date_str, "%Y-%m-%d").date()
                                else:
                                    # N·∫øu kh√¥ng c√≥ trong note th√¨ m·∫∑c ƒë·ªãnh c√πng ng√†y h√¥m nay
                                    start_date = end_date = date.today()

                                # D√πng h√†m chu·∫©n calc_hours t·ª´ auth.py
                                total_hours = calc_hours(start_date, end_date, start_time, end_time)
                                if total_hours > 0:
                                    update_data["khoi_luong"] = round(total_hours, 2)
                            except Exception as e:
                                st.warning(f"‚ö†Ô∏è L·ªói t√≠nh kh·ªëi l∆∞·ª£ng cho d√≤ng {i+1}: {e}")


                            supabase.table("tasks").update(update_data).eq("id", tid).execute()

                        st.success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t gi·ªù, ghi ch√∫ v√† kh·ªëi l∆∞·ª£ng!")
                        st.rerun()

                with col2:
                    if st.button("üóëÔ∏è X√≥a c√°c d√≤ng ƒë√£ ch·ªçn", key="delete_my_tasks_btn"):
                        ids_to_delete = []
                        for i, row in edited.iterrows():
                            if row.get("Ch·ªçn"):
                                ids_to_delete.append(int(my_tasks.iloc[i]["id"]))
                        if ids_to_delete:
                            for tid in ids_to_delete:
                                supabase.table("tasks").delete().eq("id", tid).execute()
                            
                            st.success(f"‚úÖ ƒê√£ x√≥a {len(ids_to_delete)} d√≤ng")
                            st.rerun()
                        else:
                            st.warning("‚ö†Ô∏è Ch∆∞a ch·ªçn d√≤ng n√†o ƒë·ªÉ x√≥a")

            # ====== T·ª± th√™m c√¥ng vi·ªác cho b·∫£n th√¢n (n·∫øu Public) ======
            if is_public:
                st.markdown("---")
                st.subheader("‚ûï Th√™m kh·ªëi l∆∞·ª£ng / c√¥ng nh·∫≠t cho b·∫£n th√¢n")

                task_name = st.selectbox("C√¥ng vi·ªác", jobs["name"].tolist(), key="self_task")

                # ---- Ch·ªçn ng√†y & gi·ªù (4 c·ªôt tr√™n 1 h√†ng) ----
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    start_date = st.date_input("Ng√†y b·∫Øt ƒë·∫ßu", key="my_start_date")
                with col2:
                    start_time = st.time_input("Gi·ªù b·∫Øt ƒë·∫ßu", time(8, 0), key="my_start_time")
                with col3:
                    end_date = st.date_input("Ng√†y k·∫øt th√∫c", key="my_end_date", value=start_date)
                with col4:
                    end_time = st.time_input("Gi·ªù k·∫øt th√∫c", time(17, 0), key="my_end_time")

                note = st.text_area("üìù Ghi ch√∫ (tu·ª≥ ch·ªçn)", key="my_note")

                if st.button("‚ûï Th√™m c√¥ng nh·∫≠t cho t√¥i", key="add_self_cong_btn"):
                    total_hours = calc_hours(start_date, end_date, start_time, end_time)
                    # üìù T·∫°o ghi ch√∫ g·ªçn, ch·ªâ th√™m 1 l·∫ßn
                    if note.strip():
                        note_txt = f"‚è∞ {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} ({start_date} - {end_date}) {note.strip()}"
                    else:
                        note_txt = f"‚è∞ {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} ({start_date} - {end_date})"


                    supabase.table("tasks").insert({
                        "project": project,
                        "task": task_name,
                        "assignee": username,
                        "khoi_luong": total_hours,
                        "note": note_txt,
                        "progress": 0
                    }).execute()
                    
                    st.success(f"‚úÖ ƒê√£ th√™m {total_hours} gi·ªù c√¥ng cho c√¥ng vi·ªác '{task_name}'")
                    st.rerun()



    # ===========================================================
    # 2) TH·ªêNG K√ä C√îNG VI·ªÜC (ch·ªâ d·ª± √°n m√¨nh qu·∫£n l√Ω)
    # ===========================================================
    else:
        st.subheader("üìä Th·ªëng k√™ C√¥ng Vi·ªác")
        if not managed:
            st.info("‚ö†Ô∏è B·∫°n kh√¥ng ph·∫£i Ch·ªß nhi·ªám/Ch·ªß tr√¨ d·ª± √°n n√†o n√™n kh√¥ng c√≥ d·ªØ li·ªáu th·ªëng k√™.")
            return

        all_projects = managed
        selected_projects = st.multiselect(
            "Ch·ªçn d·ª± √°n c·∫ßn th·ªëng k√™", all_projects, default=all_projects, key="stat_proj_multi"
        )
        if not selected_projects:
            st.info("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu c√¥ng vi·ªác.")
            return

        qmarks = ",".join(["%s"] * len(selected_projects))
        
        # ‚úÖ L·∫•y ƒë·∫ßy ƒë·ªß c·ªôt bao g·ªìm assignee ƒë·ªÉ tr√°nh KeyError
        data = supabase.table("tasks").select("id, project, task, assignee, khoi_luong, note, progress, created_at, deadline").in_("project", selected_projects).execute()
        df = pd.DataFrame(data.data)

        # üõ°Ô∏è Ki·ªÉm tra c·ªôt assignee ƒë·ªÉ tr√°nh KeyError
        if "assignee" in df.columns:
            df["assignee"] = df["assignee"].map(user_map).fillna(df["assignee"])
        else:
            st.warning("‚ö†Ô∏è D·ªØ li·ªáu tasks kh√¥ng c√≥ c·ªôt 'assignee'. Vui l√≤ng ki·ªÉm tra b·∫£ng 'tasks' tr√™n Supabase.")
            df["assignee"] = "Kh√¥ng x√°c ƒë·ªãnh"

        if df.empty:
            st.info("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu c√¥ng vi·ªác.")
            return

        stat_mode = st.radio("Xem theo", ["D·ª± √°n", "Ng∆∞·ªùi d√πng"], key="stat_mode")

        if stat_mode == "D·ª± √°n":
            proj_summary = df.groupby("project").agg(
                T·ªïng_c√¥ng_vi·ªác=("id", "count"),
                Ho√†n_th√†nh=("progress", lambda x: (x == 100).sum()),
                Ch∆∞a_ho√†n_th√†nh=("progress", lambda x: (x < 100).sum()),
                Ti·∫øn_ƒë·ªô_TB=("progress", "mean"),
            ).reset_index().rename(columns={"project": "D·ª± √°n"})

            st.dataframe(
                proj_summary.style.format({"Ti·∫øn_ƒë·ªô_TB": "{:.0f}%"}).bar(subset=["Ti·∫øn_ƒë·ªô_TB"], color="#4CAF50"),
                use_container_width=True
            )

            fig = px.bar(
                proj_summary, x="D·ª± √°n", y="Ti·∫øn_ƒë·ªô_TB", color="D·ª± √°n", text="Ti·∫øn_ƒë·ªô_TB",
                title="Ti·∫øn ƒë·ªô c√°c d·ª± √°n"
            )
            fig.update_traces(texttemplate='%{text:.0f}%', textposition="outside")
            fig.update_layout(yaxis=dict(title="Ti·∫øn ƒë·ªô (%)", range=[0, 100]), showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
        else:
            grouped = df.groupby(["assignee", "project"]).agg(
                T·ªïng_c√¥ng_vi·ªác=("id", "count"),
                Ho√†n_th√†nh=("progress", lambda x: (x == 100).sum()),
                Ch∆∞a_ho√†n_th√†nh=("progress", lambda x: (x < 100).sum()),
                Ti·∫øn_ƒë·ªô_TB=("progress", "mean"),
            ).reset_index().rename(columns={"assignee": "Ng∆∞·ªùi d√πng", "project": "D·ª± √°n"})

            st.dataframe(
                grouped.style.format({"Ti·∫øn_ƒë·ªô_TB": "{:.0f}%"}).bar(subset=["Ti·∫øn_ƒë·ªô_TB"], color="#FF9800"),
                use_container_width=True
            )






